drop trigger if exists "on_auth_user_created" on "auth"."users";


drop trigger if exists "handle_course_updated_at" on "public"."course";

drop trigger if exists "handle_creator_updated_at" on "public"."creator";

drop trigger if exists "handle_enrollment_updated_at" on "public"."enrollment";

drop trigger if exists "handle_lesson_updated_at" on "public"."lesson";

drop trigger if exists "handle_owner_updated_at" on "public"."owner";

drop trigger if exists "handle_student_updated_at" on "public"."student";

drop trigger if exists "handle_unit_updated_at" on "public"."unit";

alter table "public"."course" drop constraint "course_owner_fkey";

alter table "public"."creator" drop constraint "creator_person_fkey";

alter table "public"."enrollment" drop constraint "enrollment_course_fkey";

alter table "public"."enrollment" drop constraint "enrollment_student_fkey";

alter table "public"."lesson" drop constraint "lesson_unit_fkey";

alter table "public"."owner" drop constraint "owner_person_fkey";

alter table "public"."student" drop constraint "student_person_fkey";

alter table "public"."unit" drop constraint "unit_course_fkey";

alter table "public"."course" drop constraint "course_pkey";

alter table "public"."creator" drop constraint "creator_pkey";

alter table "public"."enrollment" drop constraint "enrollment_pkey";

alter table "public"."lesson" drop constraint "lesson_pkey";

alter table "public"."owner" drop constraint "owner_pkey";

alter table "public"."student" drop constraint "student_pkey";

alter table "public"."unit" drop constraint "unit_pkey";

drop index if exists "public"."course_pkey";

drop index if exists "public"."creator_pkey";

drop index if exists "public"."enrollment_pkey";

drop index if exists "public"."lesson_pkey";

drop index if exists "public"."owner_pkey";

drop index if exists "public"."student_pkey";

drop index if exists "public"."unit_pkey";

drop table "public"."course";

drop table "public"."creator";

drop table "public"."enrollment";

drop table "public"."lesson";

drop table "public"."owner";

drop table "public"."student";

drop table "public"."unit";

create table "public"."courses" (
    "id" bigint generated by default as identity not null,
    "name" text,
    "image" text default ''::text,
    "detail" text default ''::text,
    "live" boolean default false,
    "main_key" bigint default '0'::bigint,
    "created_at" timestamp with time zone default now(),
    "updated_at" timestamp with time zone,
    "owner" uuid
);


alter table "public"."courses" enable row level security;

create table "public"."creators" (
    "id" bigint generated by default as identity not null,
    "person" uuid,
    "created_at" timestamp with time zone default now(),
    "updated_at" timestamp with time zone
);


create table "public"."enrollments" (
    "id" bigint generated by default as identity not null,
    "course" bigint,
    "student" bigint,
    "created_at" timestamp with time zone default now(),
    "updated_at" timestamp with time zone
);


create table "public"."lessons" (
    "id" bigint generated by default as identity not null,
    "name" text,
    "content" text,
    "type" text,
    "unit" bigint,
    "main_key" bigint,
    "created_at" timestamp with time zone default now(),
    "updated_at" timestamp with time zone
);


create table "public"."owners" (
    "id" bigint generated by default as identity not null,
    "person" uuid,
    "created_at" timestamp with time zone default now(),
    "updated_at" timestamp with time zone
);


create table "public"."students" (
    "id" bigint generated by default as identity not null,
    "person" uuid,
    "created_at" timestamp with time zone default now(),
    "updated_at" timestamp with time zone
);


create table "public"."units" (
    "id" bigint generated by default as identity not null,
    "name" text,
    "image" text default ''::text,
    "content" text default ''::text,
    "live" boolean,
    "course" bigint,
    "main_key" bigint,
    "created_at" timestamp with time zone default now(),
    "updated_at" timestamp with time zone
);


alter table "public"."units" enable row level security;

alter table "public"."profiles" disable row level security;

CREATE UNIQUE INDEX course_pkey ON public.courses USING btree (id);

CREATE UNIQUE INDEX creator_pkey ON public.creators USING btree (id);

CREATE UNIQUE INDEX enrollment_pkey ON public.enrollments USING btree (id);

CREATE UNIQUE INDEX lesson_pkey ON public.lessons USING btree (id);

CREATE UNIQUE INDEX owner_pkey ON public.owners USING btree (id);

CREATE UNIQUE INDEX student_pkey ON public.students USING btree (id);

CREATE UNIQUE INDEX unit_pkey ON public.units USING btree (id);

alter table "public"."courses" add constraint "course_pkey" PRIMARY KEY using index "course_pkey";

alter table "public"."creators" add constraint "creator_pkey" PRIMARY KEY using index "creator_pkey";

alter table "public"."enrollments" add constraint "enrollment_pkey" PRIMARY KEY using index "enrollment_pkey";

alter table "public"."lessons" add constraint "lesson_pkey" PRIMARY KEY using index "lesson_pkey";

alter table "public"."owners" add constraint "owner_pkey" PRIMARY KEY using index "owner_pkey";

alter table "public"."students" add constraint "student_pkey" PRIMARY KEY using index "student_pkey";

alter table "public"."units" add constraint "unit_pkey" PRIMARY KEY using index "unit_pkey";

alter table "public"."courses" add constraint "courses_owner_fkey" FOREIGN KEY (owner) REFERENCES profiles(id) not valid;

alter table "public"."courses" validate constraint "courses_owner_fkey";

alter table "public"."creators" add constraint "creators_person_fkey" FOREIGN KEY (person) REFERENCES profiles(id) not valid;

alter table "public"."creators" validate constraint "creators_person_fkey";

alter table "public"."enrollments" add constraint "enrollments_course_fkey" FOREIGN KEY (course) REFERENCES courses(id) not valid;

alter table "public"."enrollments" validate constraint "enrollments_course_fkey";

alter table "public"."enrollments" add constraint "enrollments_student_fkey" FOREIGN KEY (student) REFERENCES students(id) not valid;

alter table "public"."enrollments" validate constraint "enrollments_student_fkey";

alter table "public"."lessons" add constraint "lessons_unit_fkey" FOREIGN KEY (unit) REFERENCES units(id) not valid;

alter table "public"."lessons" validate constraint "lessons_unit_fkey";

alter table "public"."owners" add constraint "owners_person_fkey" FOREIGN KEY (person) REFERENCES profiles(id) not valid;

alter table "public"."owners" validate constraint "owners_person_fkey";

alter table "public"."students" add constraint "students_person_fkey" FOREIGN KEY (person) REFERENCES profiles(id) not valid;

alter table "public"."students" validate constraint "students_person_fkey";

alter table "public"."units" add constraint "units_course_fkey" FOREIGN KEY (course) REFERENCES courses(id) not valid;

alter table "public"."units" validate constraint "units_course_fkey";

create policy "Enable read access for all live courses or limit to the owner."
on "public"."courses"
as permissive
for select
to public
using (((auth.uid() = owner) OR (live = true)));


create policy "Enable read access for all users"
on "public"."units"
as permissive
for select
to public
using ((course IN ( SELECT courses.id
   FROM courses
  WHERE ((auth.uid() = courses.owner) OR (courses.live = true)))));


CREATE TRIGGER handle_course_updated_at BEFORE UPDATE ON public.courses FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');

CREATE TRIGGER handle_creator_updated_at BEFORE UPDATE ON public.creators FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');

CREATE TRIGGER handle_enrollment_updated_at BEFORE UPDATE ON public.enrollments FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');

CREATE TRIGGER handle_lesson_updated_at BEFORE UPDATE ON public.lessons FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');

CREATE TRIGGER handle_owner_updated_at BEFORE UPDATE ON public.owners FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');

CREATE TRIGGER handle_student_updated_at BEFORE UPDATE ON public.students FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');

CREATE TRIGGER handle_unit_updated_at BEFORE UPDATE ON public.units FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');


drop policy "Anyone can upload an avatar." on "storage"."objects";

drop policy "Avatar images are publicly accessible." on "storage"."objects";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION storage.extension(name text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
DECLARE
_parts text[];
_filename text;
BEGIN
	select string_to_array(name, '/') into _parts;
	select _parts[array_length(_parts,1)] into _filename;
	-- @todo return the last part instead of 2
	return split_part(_filename, '.', 2);
END
$function$
;

CREATE OR REPLACE FUNCTION storage.filename(name text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[array_length(_parts,1)];
END
$function$
;

CREATE OR REPLACE FUNCTION storage.foldername(name text)
 RETURNS text[]
 LANGUAGE plpgsql
AS $function$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[1:array_length(_parts,1)-1];
END
$function$
;


