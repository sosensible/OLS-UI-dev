CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION handle_new_user();


create table "public"."course" (
    "id" bigint generated by default as identity not null,
    "course_id" uuid default uuid_generate_v4(),
    "name" character varying,
    "image" character varying default ''::character varying,
    "detail" text,
    "live" boolean default false,
    "created_at" timestamp with time zone default now(),
    "updated_at" timestamp with time zone default now(),
    "owner" bigint,
    "editor" uuid,
    "ceators" uuid[]
);


alter table "public"."course" enable row level security;

create table "public"."creator" (
    "id" bigint generated by default as identity not null,
    "person" uuid,
    "created_at" timestamp with time zone default now(),
    "updated_at" timestamp with time zone default now()
);


alter table "public"."creator" enable row level security;

create table "public"."enrollment" (
    "id" bigint generated by default as identity not null,
    "student" bigint,
    "created_at" timestamp with time zone default now(),
    "updated_at" timestamp with time zone default now(),
    "course" bigint
);


alter table "public"."enrollment" enable row level security;

create table "public"."lesson" (
    "id" bigint generated by default as identity not null,
    "name" character varying,
    "lesson_id" uuid default uuid_generate_v4(),
    "content" text,
    "live" boolean,
    "editor" uuid,
    "unit" bigint,
    "created_at" timestamp with time zone default now(),
    "updated_at" timestamp with time zone default now()
);


alter table "public"."lesson" enable row level security;

create table "public"."owner" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "updated_at" timestamp with time zone default now(),
    "profile" uuid
);


alter table "public"."owner" enable row level security;

create table "public"."profiles" (
    "id" uuid not null,
    "updated_at" timestamp with time zone,
    "username" text,
    "full_name" text,
    "avatar_url" text,
    "website" text
);


alter table "public"."profiles" enable row level security;

create table "public"."student" (
    "id" bigint generated by default as identity not null,
    "person" uuid,
    "created_at" timestamp with time zone default now(),
    "updated_at" timestamp with time zone default now()
);


alter table "public"."student" enable row level security;

create table "public"."unit" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "updated_at" timestamp with time zone default now(),
    "name" character varying,
    "content" text default ''::text,
    "image" character varying default ''::character varying,
    "live" boolean default false,
    "editor" uuid,
    "unit_id" uuid default uuid_generate_v4(),
    "course" bigint
);


alter table "public"."unit" enable row level security;

CREATE UNIQUE INDEX course_pkey ON public.course USING btree (id);

CREATE UNIQUE INDEX creator_pkey ON public.creator USING btree (id);

CREATE UNIQUE INDEX enrollment_pkey ON public.enrollment USING btree (id);

CREATE UNIQUE INDEX lesson_pkey ON public.lesson USING btree (id);

CREATE UNIQUE INDEX owner_pkey ON public.owner USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

CREATE UNIQUE INDEX profiles_username_key ON public.profiles USING btree (username);

CREATE UNIQUE INDEX student_pkey ON public.student USING btree (id);

CREATE UNIQUE INDEX unit_pkey ON public.unit USING btree (id);

alter table "public"."course" add constraint "course_pkey" PRIMARY KEY using index "course_pkey";

alter table "public"."creator" add constraint "creator_pkey" PRIMARY KEY using index "creator_pkey";

alter table "public"."enrollment" add constraint "enrollment_pkey" PRIMARY KEY using index "enrollment_pkey";

alter table "public"."lesson" add constraint "lesson_pkey" PRIMARY KEY using index "lesson_pkey";

alter table "public"."owner" add constraint "owner_pkey" PRIMARY KEY using index "owner_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."student" add constraint "student_pkey" PRIMARY KEY using index "student_pkey";

alter table "public"."unit" add constraint "unit_pkey" PRIMARY KEY using index "unit_pkey";

alter table "public"."course" add constraint "course_editor_fkey" FOREIGN KEY (editor) REFERENCES profiles(id) not valid;

alter table "public"."course" validate constraint "course_editor_fkey";

alter table "public"."course" add constraint "course_owner_fkey" FOREIGN KEY (owner) REFERENCES owner(id) not valid;

alter table "public"."course" validate constraint "course_owner_fkey";

alter table "public"."creator" add constraint "creator_person_fkey" FOREIGN KEY (person) REFERENCES profiles(id) not valid;

alter table "public"."creator" validate constraint "creator_person_fkey";

alter table "public"."enrollment" add constraint "enrollment_course_fkey" FOREIGN KEY (course) REFERENCES course(id) not valid;

alter table "public"."enrollment" validate constraint "enrollment_course_fkey";

alter table "public"."enrollment" add constraint "enrollment_student_fkey" FOREIGN KEY (student) REFERENCES student(id) not valid;

alter table "public"."enrollment" validate constraint "enrollment_student_fkey";

alter table "public"."lesson" add constraint "lesson_editor_fkey" FOREIGN KEY (editor) REFERENCES profiles(id) not valid;

alter table "public"."lesson" validate constraint "lesson_editor_fkey";

alter table "public"."lesson" add constraint "lesson_unit_fkey" FOREIGN KEY (unit) REFERENCES unit(id) not valid;

alter table "public"."lesson" validate constraint "lesson_unit_fkey";

alter table "public"."owner" add constraint "owner_profile_fkey" FOREIGN KEY (profile) REFERENCES profiles(id) not valid;

alter table "public"."owner" validate constraint "owner_profile_fkey";

alter table "public"."profiles" add constraint "profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."profiles" validate constraint "profiles_id_fkey";

alter table "public"."profiles" add constraint "profiles_username_key" UNIQUE using index "profiles_username_key";

alter table "public"."profiles" add constraint "username_length" CHECK ((char_length(username) >= 3)) not valid;

alter table "public"."profiles" validate constraint "username_length";

alter table "public"."student" add constraint "student_person_fkey" FOREIGN KEY (person) REFERENCES profiles(id) not valid;

alter table "public"."student" validate constraint "student_person_fkey";

alter table "public"."unit" add constraint "unit_course_fkey" FOREIGN KEY (course) REFERENCES course(id) not valid;

alter table "public"."unit" validate constraint "unit_course_fkey";

alter table "public"."unit" add constraint "unit_editor_fkey" FOREIGN KEY (editor) REFERENCES profiles(id) not valid;

alter table "public"."unit" validate constraint "unit_editor_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$function$
;

create policy "Public profiles are viewable by everyone."
on "public"."profiles"
as permissive
for select
to public
using (true);


create policy "Users can insert their own profile."
on "public"."profiles"
as permissive
for insert
to public
with check ((auth.uid() = id));


create policy "Users can update own profile."
on "public"."profiles"
as permissive
for update
to public
using ((auth.uid() = id));



create policy "Anyone can upload an avatar."
on "storage"."objects"
as permissive
for insert
to public
with check ((bucket_id = 'avatars'::text));


create policy "Avatar images are publicly accessible."
on "storage"."objects"
as permissive
for select
to public
using ((bucket_id = 'avatars'::text));



